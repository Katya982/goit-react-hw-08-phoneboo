{"version":3,"file":"static/js/386.02d98855.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","redux/selectors.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Label = styled.label`\n    margin-right: 20px;\n       font-weight: 600;\n`;\n\nexport const Input = styled.input`\n    margin-left: 10px;\n`;\n\nexport const Button = styled.button`\n  cursor: pointer;\n  border: solid 1px transparent;\n  border-radius: 4px;\n  padding: 3px 30px;\n  color: #ffffff;\n  background-color: #9555af;\n \n  margin-right: 20px;\n  margin-top: 20px;\n\n  &:active {\n  transform: translateY(1px);\n  filter: saturate(150%);\n}\n\n&:hover,\n&:focus {\n  color: #9555af;\n  border-color: currentColor;\n  background-color: white;\n}\n\n    &:last-child {\n    margin-bottom: 0;\n    }\n`;\n\nexport const Form = styled.form`\n  background: #e7d7f1;\n  padding: 20px;\n  text-align: center;\n  border-radius: 5px;\n  max-width: 600px;\n\n  box-shadow: 0 2px 5px rgba(0,0,0,0.2), 0 4px 6px rgba(0,0,0,0.2);\n`;\n\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const  selectContacts = state => state.contacts.items;\n\nexport const selectFilters = state => state.filter;\n\nexport const selectLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilteredContacts = createSelector(\n    [selectContacts, selectFilters],\n    (contacts, filtered) => {\n\n        return contacts.filter(({ name }) =>\n            name.toLowerCase().includes(filtered.toLowerCase())\n        );\n    }\n);","import { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport Notiflix from 'notiflix';\nimport { Label, Input, Button, Form } from './ContactForm.styled'\nimport { selectContacts } from '../../redux/selectors';\nimport { addContacts } from '../../redux/operations';\n\nconst ContactForm = ({ onSubmit }) => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const contact = {\n      name: name,\n      number: number,\n    };\n\n    const isContactExist = contacts.find(\n      ({ name }) => name.toLowerCase() === contact.name.toLowerCase())\n\n    if (isContactExist) {\n      Notiflix.Report.warning(\n        'Alert',\n        `Contact with name ${contact.name} already exists!`,\n        'Ok'\n      );\n      return;\n    }\n\nconst isNumberExist = contacts.find(\n  (contact) =>\n    contact.number &&\n    contact.number.replace(/\\D/g, '') === number.replace(/\\D/g, '')\n);\n\n    if (isNumberExist) {\n      Notiflix.Report.warning(\n        'Alert',\n        `Number ${contact.number} is already in contacts!`,\n        'Ok'\n      );\n      return;\n    }\n\n    dispatch(addContacts(contact));\n    setName('');\n    setNumber('');\n  };\n\nconst handleChange = (event) => {\n  const { name, value } = event.target;\n  if (name === 'name') {\n    setName(value);\n  } else if (name === 'number') {\n    setNumber(value);\n  }\n};\n  \n    return (\n      <Form onSubmit={handleSubmit}>\n        <Label>\n          Name:\n          <Input\n            type=\"text\"\n            name=\"name\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces.\"\n            required\n            value={name}\n            onChange={handleChange}\n          />\n        </Label>\n        <Label>\n          Number:\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={handleChange}\n          />\n        </Label>\n        <Button type=\"submit\">Add contact</Button>\n      </Form>\n    );\n  \n  };\n\nexport default ContactForm;","import styled from 'styled-components';\n\nexport const ContactItem = styled.div`\n  list-style: none;\n  padding: 0;\n  margin: 10px 0;\n  display: flex;\n  align-items: center;\n  max-width: 500px;\n`;\n\nexport const ContactRoster = styled.div`\n    margin-top: 10px;\n`;\n\nexport const Button = styled.button`\n    margin-left: 30px;\n\n  cursor: pointer;\n  border: solid 1px transparent;\n  border-radius: 4px;\n  padding: 3px 30px;\n  color: #ffffff;\n  background-color: #9555af;\n  margin-right: 20px;\n\n  &:active {\n  transform: translateY(1px);\n  filter: saturate(150%);\n}\n\n&:hover,\n&:focus {\n  color: #9555af;\n  border-color: currentColor;\n  background-color: white;\n}\n\n    &:last-child {\n    margin-bottom: 0;\n    }\n`;\n\nexport const Item = styled.span`\n  padding: 15px;\n  flex: 1;\n`;","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactItem, ContactRoster, Button, Item } from './ContactList.styled';\nimport { selectError, selectLoading, selectFilteredContacts } from '../../redux/selectors';\nimport { BsFillPersonFill } from \"react-icons/bs\";\nimport { fetchContacts, deleteContacts } from '../../redux/operations';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const filteredContacts = useSelector(selectFilteredContacts);\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ContactRoster>\n      {isLoading && !error ? (\n        <p>Loading ...</p>\n      ) : filteredContacts.length === 0 && !error ? (\n        <p>Your phonebook is empty</p>\n      ) : (\n        filteredContacts.map(({ name, number, id }) => (\n          <ContactItem key={id}>\n          <BsFillPersonFill />\n          <Item>{name}</Item>\n          <Item>{number}</Item>\n            <Button type=\"button\" onClick={() => dispatch(deleteContacts(id))}>\n              Delete\n            </Button>\n          </ContactItem>\n        ))\n      )}\n    </ContactRoster>\n  );\n};\n\nexport default ContactList;","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  margin-left: 10px;\n`;\n\nexport const ContactsTitle = styled.h2`\n    text-transform: uppercase;\n    text-align: center;\n    margin-top: 0px;\n    margin-bottom: 20px;\n`;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/filterSlice'; \nimport { selectFilters } from '../../redux/selectors';\nimport { Input, ContactsTitle } from './Filter.styled';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(selectFilters);\n\n\n  const onChange = e => {\n    dispatch(setFilter(e.target.value))\n  };\n\n  return (\n    <>\n      <ContactsTitle>Contacts</ContactsTitle>\n      <label>\n        Filter contacts by name:\n        <Input\n          type=\"text\"\n          value={filterValue}\n          onChange={onChange} />\n      </label>\n    </>\n  );\n};\n\nexport default Filter;\n","import { Helmet, HelmetProvider } from 'react-helmet-async';\n\nimport ContactForm from '../components/ContactForm/ContactForm';\nimport ContactList from '../components/ContactList/ContactList';\nimport Filter from '../components/Filter/Filter';\n\nfunction Contacts() {\n  return (\n    <>\n      <HelmetProvider>\n        <Helmet>\n          <title>Phonebook</title>\n        </Helmet>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </HelmetProvider>\n    </>\n  );\n}\n\nexport default Contacts;"],"names":["Label","styled","_templateObject","_taggedTemplateLiteral","Input","_templateObject2","Button","_templateObject3","Form","_templateObject4","selectContacts","state","contacts","items","selectFilters","filter","selectLoading","isLoading","selectError","error","selectFilteredContacts","createSelector","filtered","_ref","name","toLowerCase","includes","onSubmit","useSelector","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","handleChange","event","_event$target","target","value","_jsxs","preventDefault","contact","find","_ref2","Notiflix","concat","isNumberExist","replace","addContacts","children","_jsx","type","title","required","onChange","ContactItem","ContactRoster","Item","filteredContacts","useEffect","fetchContacts","length","map","id","BsFillPersonFill","onClick","deleteContacts","ContactsTitle","filterValue","_Fragment","e","setFilter","HelmetProvider","Helmet","ContactForm","Filter","ContactList"],"sourceRoot":""}