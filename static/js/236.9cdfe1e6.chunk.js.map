{"version":3,"file":"static/js/236.9cdfe1e6.chunk.js","mappings":"4QAiHA,EA5GqB,WACnB,IAAAA,EAAeC,EAAAA,EAAAA,UAARC,GAAsBC,EAAAA,EAAAA,GAAAH,EAAA,GAAlB,GACLI,GAAWC,EAAAA,EAAAA,MACjBC,GAA6BC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,IAAI,IAApDC,EAASJ,EAATI,UAAWC,EAAKL,EAALK,MAWnB,OACEC,EAAAA,EAAAA,MAACX,EAAAA,EAAI,CACHC,KAAMA,EACNW,KAAK,WACLC,SAba,SAAAC,GACf,IAAQF,EAAmCE,EAAnCF,KAAMG,EAA6BD,EAA7BC,MAAOC,EAAsBF,EAAtBE,SAEjBA,IAFuCF,EAAZG,UAG7Bd,GAASe,EAAAA,EAAAA,IAAS,CAAEN,KAAAA,EAAMG,MAAAA,EAAOC,SAAAA,MAChCP,IAAcC,GAAST,EAAKkB,cAEjC,EAOIC,KAAM,UACNC,cAAe,CACbC,UAAW,CAAC,WAAY,WAAY,QACpCC,OAAQ,MAEVC,MAAO,CACLC,MAAO,KAETC,oBAAkB,EAAAC,SAAA,EAElBC,EAAAA,EAAAA,KAAC5B,EAAAA,EAAAA,KAAS,CACRY,KAAK,QACLiB,MAAM,SACNC,MAAO,CACL,CACEC,KAAM,QACNC,QAAS,sBAEX,CACEC,UAAU,EACVD,QAAS,2BAEXL,UAEFC,EAAAA,EAAAA,KAACM,EAAAA,EAAK,OAGRN,EAAAA,EAAAA,KAAC5B,EAAAA,EAAAA,KAAS,CACRY,KAAK,WACLiB,MAAM,WACNC,MAAO,CACL,CACEG,UAAU,EACVD,QAAS,2BAGbG,aAAW,EAAAR,UAEXC,EAAAA,EAAAA,KAACM,EAAAA,EAAAA,SAAc,OAGjBN,EAAAA,EAAAA,KAAC5B,EAAAA,EAAAA,KAAS,CACRY,KAAK,UACLiB,MAAM,mBACNO,aAAc,CAAC,YACfD,aAAW,EACXL,MAAO,CACL,CACEG,UAAU,EACVD,QAAS,yBAEX,SAAAK,GAAA,IAAGC,EAAaD,EAAbC,cAAa,MAAQ,CACtBC,UAAS,SAACC,EAAGC,GACX,OAAKA,GAASH,EAAc,cAAgBG,EAGrCC,QAAQC,OACb,IAAIC,MAAM,8BAHHF,QAAQG,SAKnB,EACD,GACDlB,UAEFC,EAAAA,EAAAA,KAACM,EAAAA,EAAAA,SAAc,OAGjBN,EAAAA,EAAAA,KAAC5B,EAAAA,EAAAA,KAAS,CACRY,KAAK,OACLiB,MAAM,OACNiB,QAAQ,uCACRhB,MAAO,CACL,CACEG,UAAU,EACVD,QAAS,yBACTe,YAAY,IAEdpB,UAEFC,EAAAA,EAAAA,KAACM,EAAAA,EAAK,OAEJN,EAAAA,EAAAA,KAAC5B,EAAAA,EAAAA,KAAS,CAAA2B,UACZC,EAAAA,EAAAA,KAACoB,EAAAA,GAAM,CAACjB,KAAK,UAAUkB,SAAS,SAAQtB,SAAC,iBAMjD,EC3Ge,SAASuB,IACtB,OACEtB,EAAAA,EAAAA,KAACuB,EAAAA,GAAc,CAAAxB,UACbhB,EAAAA,EAAAA,MAAA,OAAAgB,SAAA,EACEC,EAAAA,EAAAA,KAACwB,EAAAA,GAAM,CAAAzB,UACLC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,oBAETC,EAAAA,EAAAA,KAACyB,EAAY,QAKrB,C","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\n\nimport { register } from 'redux/auth/auth-operations';\nimport { Button, Form, Input } from 'antd';\n\nconst RegisterForm = () => {\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const { isLoading, error } = useSelector(state => state.auth);\n\n  const onFinish = values => {\n    const { name, email, password, confirm } = values;\n\n    if (password === confirm) {\n      dispatch(register({ name, email, password }));\n      !isLoading && !error && form.resetFields();\n    }\n  };\n    \n  return (\n    <Form\n      form={form}\n      name=\"register\"\n      onFinish={onFinish}\n      size={'default'}\n      initialValues={{\n        residence: ['zhejiang', 'hangzhou', 'xihu'],\n        prefix: '86',\n      }}\n      style={{\n        width: 300,\n      }}\n      scrollToFirstError\n    >\n      <Form.Item\n        name=\"email\"\n        label=\"E-mail\"\n        rules={[\n          {\n            type: 'email',\n            message: 'Email is not valid',\n          },\n          {\n            required: true,\n            message: 'This field is required',\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        name=\"password\"\n        label=\"Password\"\n        rules={[\n          {\n            required: true,\n            message: 'This field is required',\n          },\n        ]}\n        hasFeedback\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item\n        name=\"confirm\"\n        label=\"Confirm Password\"\n        dependencies={['password']}\n        hasFeedback\n        rules={[\n          {\n            required: true,\n            message: 'Confirm your password',\n          },\n          ({ getFieldValue }) => ({\n            validator(_, value) {\n              if (!value || getFieldValue('password') === value) {\n                return Promise.resolve();\n              }\n              return Promise.reject(\n                new Error('Paswords are not matching')\n              );\n            },\n          }),\n        ]}\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item\n        name=\"name\"\n        label=\"Name\"\n        tooltip=\"What do you want others to call you?\"\n        rules={[\n          {\n            required: true,\n            message: 'This field is required',\n            whitespace: true,\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n          <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Register\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default RegisterForm;","import { Helmet, HelmetProvider } from 'react-helmet-async';\n\nimport RegisterForm from '../components/RegisterForm/RegisterForm';\n\nexport default function Register() {\n  return (\n    <HelmetProvider>\n      <div>\n        <Helmet>\n          <title>Registration</title>\n        </Helmet>\n        <RegisterForm />\n      </div>\n    </HelmetProvider>\n  );\n  \n}"],"names":["_Form$useForm","Form","form","_slicedToArray","dispatch","useDispatch","_useSelector","useSelector","state","auth","isLoading","error","_jsxs","name","onFinish","values","email","password","confirm","register","resetFields","size","initialValues","residence","prefix","style","width","scrollToFirstError","children","_jsx","label","rules","type","message","required","Input","hasFeedback","dependencies","_ref","getFieldValue","validator","_","value","Promise","reject","Error","resolve","tooltip","whitespace","Button","htmlType","Register","HelmetProvider","Helmet","RegisterForm"],"sourceRoot":""}